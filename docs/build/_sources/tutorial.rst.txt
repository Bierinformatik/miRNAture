========
Tutorial
========

Through this step-by-step tutorial you could make use of key options from 
``miRNAture`` to annotate the *bona fide* miRNA complement on selected contigs 
from the coelacanth (*Latimeria chalumnae*) genome. All the required files to
execute this tutorial are included in the ``miRNAture`` source files in the `miRNAture/Tutorial` 
folder.

Annotating let-7 on coelacanth
******************************

.. figure:: coel.jpg
    :width: 320px
    :align: center
    :height: 116px
    :alt: Coelacanth image
    :figclass: align-center
    
    *Latimeria chalumnae*. Source: `Alberto Fernandez Fernandez / CC BY-SA <https://upload.wikimedia.org/wikipedia/commons/f/fa/Latimeria_Chalumnae_-_Coelacanth_-_NHMW.jpg>`_

Based on the miRNA annotation retrieved from ``Ensembl`` release 100, the
coelacanth genome featured 8 let-7 locus distributed along 6 contigs. For purposes of this
tutorial, 3 contigs were selected with variable number of miRNA/let-7 annotations, as follows:

==============  ===========  ============ ==========
  Contig        Length (Mb)  Numb. miRNAs Let-7 loci
==============  ===========  ============ ==========
JH126571.1      5.981           5            1
JH129429.1      0.248           3            3
AFYH01291077.1  0.001           1            0
==============  ===========  ============ ==========

The main goal is the identification of the let-7 loci on the referred 
contigs. To do so, the `Tutorial` folder contained all the input files in `Data/`, 
required wrapper to `miRNAture` on `Code/` and a `Results/` folder where
all prediction will be stored. As you can imagine, homology comparisons are prone 
to create both, a high number of input and output files. `miRNAture` avoids manual
curation to the detected hits, life is too short to perform all of those steps by hand! 

#Folder structure
=================

The folder tree on miRNAture looks like::
    
    $ tree -L 1 miRNAture/
    miRNAture/
    ├── Code
    ├── LICENSE
    ├── Manuscript
    └── README.md

Out target folder is located on ``Code/Tutorial``::
    
    $ cd Code/Tutorial
    $ tree -L2 .
    Tutorial
    ├── Code
    │   └── run_miRNAture.sh
    ├── Data
    │   ├── annotated_miRNAs_latch.gff3
    │   ├── latimeria_chalumnae_genome.fa
    │   ├── Latimeria_chalumnae.LatCha1.100.gff3
    │   └── QueriesToTest
    └── Results

The ``Tutorial`` folder is composed by the subfolders: ``Code/``, where all the
necessary scripts to run ``miRNAture`` are located. ``Data/`` keeps the
described genome from coelacanth in a multi-fasta format in 
``latimeria_chalumnae_genome.fa``. Another key folder is ``QueriesToTest/``,
where the miRNAs from 11 chordates were provided to serve as query sequences.
Detailed list of query species and their correspondent files are described on
``QueriesToTest/queries_description.txt``. The set of files inside ``Data/``
corresponds to the current and filtered miRNA annotation of coelacanth retrieved 
from ``Ensembl`` release 100: ``Latimeria_chalumnae.LatCha1.100.gff3`` and
``annotated_miRNAs_latch.gff3`` in ``GFF3`` format, respectively. The last
``Results`` folder will conserve all the output files generated by
``miRNAture``. 

Input files
===========
As described earlier, to run ``miRNAture`` just go directly to ``Code/``, located 
on the ``Tutorial/`` folder::

    $ cd Code/
    $ ls -ls
    4 -rwxr-xr-x 1 cristian students 598 Jul  8 18:47 run_miRNAture.sh

As you noted, exists a bash file inside this folder which will organize all our
code to run ``miRNAture``. This way is preferred, if you think about increase
the reproducibility of your computational experiments. Looking in detail this code will give 
you a general idea to run ``miRNAture``:

.. code-block:: bash

    #!/bin/bash
    
    # Declare input folder
    current=$( pwd )
    
    # Step 1: Activate conda environment
    conda activate miRNAture

    # Step 2: Input files/folders
    specie_tag="Latch"
    specie_genome="$current/../Data/latimeria_chalumnae_genome.fa"
    specie_name="Latimeria_chalumnnae"
    workdir="$current/../Results"
    mirfix_path="/homes/biertank/cristian/Projects/MIRfix/scripts/MIRfix.py"
    mode="Blast,HMM,Infernal,Final"
    strategy="1,2,3,4,9,10,ALL"
    blastQueriesFolder="$current/../Data/QueriesToTest"
    
    # Step 3: Running miRNAture
    cd $current/../../../Code/
    
    # Step 3.1: Run homology-searches:
    ./miRNAture -stage homology -speG $specie_genome -speN $specie_name \
     -speT $specie_tag -w $workdir -mfx $mirfix_path -m $mode -pe 0 \
     -str $strategy -blastq $blastQueriesFolder

    #Step 3.2: Validate miRNAs annotating their mature sequences:
    ./miRNAture -stage validation -speG $specie_genome -speN $specie_name \
     -speT $specie_tag -w $workdir -mfx $mirfix_path -m $mode -pe 0 \
     -str $strategy -blastq $blastQueriesFolder

The last script shows three steps that are required to run ``miRNAture``:

1. Activate the ``conda`` environment called miRNAture. The installation and
   activation of this environment is required previously to run ``miRNAture``.
   All the dependences are described on the file ``miRNAture.yml``, located on
   the ``miRNAture/Code/`` folder.
2. Declare the name of input and output locations. ``miRNAture`` detects
   different flags with their correspondent values. The basic configuration is
   composed by:
   
   * Specie genome: Current target sequence
   * Specie name: Scientific name of the specie which belongs the subject
     sequence(s).
   * Specie tag: Tag of the specie name, suggested one takes the first two
     letters from the Genera joined with the first two from the specie (i.e Homo
     sapiens = hosa, Didemnum vexillum = dive, Latimeria chalumnae = lach).
   * Working directory: Output directory, final path of ``miRNAture`` results.
   * MIRfix path: path of MIRfix on your system.
   * Running mode: Select at least one, or any combination of the miRNA search strategies between:
     ``Blast``, ``HMM`` or/and ``Infernal. At the same time, to merge the complete results
     from those homology search modes, write at the end ``Final``.
   * Blast strategies: Write the numbers of desired ``blastn`` strategies.
     Possible strategies are: ``1,2,3,4,5,6``. At the same time, to merge all results
     put at the end ``ALL``. 
   * Path of ``blastn`` queries: Declare the path of annotated query sequences of
     miRNAs. In this case is enough to indicate the folder name.
3. Run ``miRNAture``. Setup all the command line options based on the described
   input files on step 2. The list of complete flags can be found at::
   
    $ ./miRNAture --help
    Usage:
    ./miRNAture [-options]
   
    Options:
    -help       print this documentation
    
    -man        Prints the manual page and exits.

    -stage      Selects the running mode of miRNAture. The options are:
                'homology', 'validation' or 'complete'.
    
    -speG       path of target genome or genomic sequence to be analyzed
    
    -speN       Specie or sequence source's scientific name. The format must
                be: Genera_specie, separated by '_'.
    
    -speT       Tag of the specie, sequence or project. Just for future
                reference.
    
    -w          Path of working directory
    
    -mfx        Path of the MIRfix
                <https://github.com/Bierinformatik/MIRfix> program:
                "MIRfix.py"
    
    -m          Homology search modes: Blast,HMM,Infernal and Final. It is
                possible to perform individual analysis, but it is always
                desirable include the Final option.
    
    -str        This flag is blast specific. It corresponds to the selected
                blast strategies used to search miRNAs. It might be
                indicated along with -m Blast or in case you refer it in
                your selected mode.
    
    -blstq      Path of blast queries sequences in fasta format to be
                searched on the subject sequence.

Searching miRNAs
================

The most important step will be performed! Based on the last configurations on
the script ``run_miRNAture.sh``, ``miRNAture`` will be executed on the designed
coelacanth sequences. The idea is to perform independently each of the stages, 
*homology-searches* and *detection of mature*, for demonstrative 
purposes. In case that you require to run the complete pipeline, just adjust the
parameter **-stage** to the *complete* option. 


Homology search
^^^^^^^^^^^^^^^

As mentioned, we are going to execute the *homology-search* stage. To activate
this stage in ``miRNAture`` please verify the flag value to be **-stage homology**.
In brief, our *target* coelacanth sequences would be annotated using a set of
miRNA *queries* that belong from the following chordate species, (V: vertebrata, T:
tunicata and C:cephalochordata) and one echinoderm (E):

* *Anolis carolinensis* (V)
* *Branchiostoma belcheri* (C)
* *Branchiostoma floridae* (C)
* *Ciona robusta* (T)
* *Ciona savignyi* (T)
* *Danio rerio* (V)
* *Eptatretus burgeri* (V)
* *Petromyzon marinus* (V)
* *Strongylocentrotus purpuratus* (E)
* *Xenopus laevis* (V)
* *Xenopus tropicalis* (V)

We are going to test all the capability of ``miRNAture``, using at the same time
all the available modes: ``Blast``, ``HMM``, ``Infernal`` and the final 
concatenation with ``Final``. Specifically for the pairwise-comparisons with
``Blast`` mode, we are going to use only 3 strategies: 1,9,10 and the final
concatenation and comparison with ``ALL``, but feel free to choose more or less
strategies. 

Then, just let it run typing::

    $./run_miRNAture.sh homology

A long descriptive output will be printed on the screen. Keep an eye on the ``Results/``
folder where the action is taking place. 

   .. note:: Keep in mind that ``run_miRNAture.sh`` was created as an example to run ``miRNAture`` but it does not mean that is the only way to do that. Change it according your requirements.


Homology search results
^^^^^^^^^^^^^^^^^^^^^^^

To refer directly to the results, type::

    $ cd ../Results/
    $ tree -L 1
    Results/
    ├── Blast
    ├── Final_Candidates
    ├── HMMs
    ├── Infernal
    ├── miRNAture_log_190609072022.log
    ├── miRNAture_log_22505108072023.log
    ├── miRNAture_log_23590008072025.log
    ├── miRNAture_log_4209072026.log
    └── mirnature_runLatch.sh

If everything goes well, you could see 4 log files ``miRNA_log_*.log``, a
script generated automatically to run the search strategy on ``miRNAture`` 
(``mirnature_runLatch.sh``) and the folders with homology comparisons: ``Blast/``, 
``HMMs`` and direct structure comparison: ``Infernal`` and the ``Final_Candidates``
with the final set of homology predicted miRNAs. Next, go directly to the
``Final_Candidates`` folder::

    $ cd Final_Candidates/
    $ tree -L 1
    ├── all_RFAM_Latch_Final.ncRNAs_homology.txt
    ├── all_RFAM_Latch_Final.truetable
    ├── all_RFAM_Latch_Final.truetable.discarded.table
    ├── all_RFAM_Latch_Final.truetable.joined.table
    ├── all_RFAM_Latch_Final.truetable.joined.table.db
    ├── all_RFAM_Latch_Final.truetable.temp
    └── Fasta

Where the most important file is ``all_RFAM_Latch_Final.ncRNAs_homology.txt``,
which reported all the merged candidates to miRNAs on the subject contigs
from coelacanth. The results are summarised on the following table:

==============  ===========  ============  =============== 
  Contig        Length (Mb)  Numb. miRNAs  miRNAture Pred. 
==============  ===========  ============  ===============
JH126571.1      5.98145           5          122
JH126620.1      3.03251           8          106
AFYH01291077.1  0.00106           1          0
==============  ===========  ============  ===============

The final results could be discriminated by the annotation method (Blast, HMM or
Infernal):

==============  =====  ===  ========  =============== 
  Contig        Blast  HMM  Infernal  miRNAture Pred. 
==============  =====  ===  ========  ===============
JH126571.1        22    7      93            122
JH126620.1        35    6      65            106
==============  =====  ===  ========  ===============

and even, this set of computational annotations could be visualized on a broad
genome context, generating for example a `BED <https://www.ensembl.org/info/website/upload/bed.html>`_ file and uploading it at the Coelacanth Ensembl Genome Browser, using some Linux commands as follows::

    $awk '{print $1"\t"$6"\t"$7"\t"$8"\t"$2"\t"$3}'
    all_RFAM_Latch_Final.ncRNAs_homology.txt > predicted_miRNAture.bed

Next, just upload the track on the corresponding Genome Ensembl hub (as explained in more detail `here <https://www.ensembl.org/info/website/upload/index.html>`_) as a Custom Track.

Certainly, after uploading this miRNAs coordinates you would visualize this results:

.. figure:: general_view.png
    :width: 600px
    :align: center
    :height: 99px
    :alt: Genome Browser Coel
    :figclass: align-center
 

This image corresponds to the region ``JH126620.1:788915-822338``, which
according to the Ensembl annotation, exists 4 miRNA genes
of the families: mir-130 (ENSLACG00000021481), mir-454 (ENSLACG00000019256),
and two of mir-130 (ENSLACG00000020131, ENSLACG00000019975)

Here, ``miRNAture`` detected the same families, with overlapping regions on the
previously reported miRNAs on *L. chalumnae*.

.. figure:: firstTwo.png
    :width: 600px
    :align: center
    :height: 99px
    :alt: Genome Browser Coel
    :figclass: align-center
 
And this is the second cluster, with two families, the overlapping is the same
but in one miRNA the family prediction and the strand differ:

.. figure:: secondTwo.png
    :width: 600px
    :align: center
    :height: 99px
    :alt: Genome Browser Coel
    :figclass: align-center
 
For that reason, those candidates required a complementary evaluation of their current detection and correct positioning of the *mature* miRNA sequences. 
As a final result, you could check that all the reported miRNAs on the contigs
JH126571.1 and JH126620.1 were identified. The reported miRNA on AFYH01291077.1,
was predicted as a miRNA using RFAM, but currently there is no information about
the family or mature products. ``miRNAture`` detected this candidate on the
direct Infernal searches, but it did not show an acceptable homology (for
mir-105 family) and folding values (Bitscore: 13.4 and E-value 7.8), see file
``Results/miRNA_predictionInfernal/Latch/RF00670_Latch.tab``.

On the other side, ``miRNAture`` detected new candidates that currently are not
reported on the genome annotation.

Validation of miRNA candidates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An additional output was generated on the ``Final_results/`` folder and contained
all the resulted fasta sequences from the last 228 hairpin candidates, organized
by their Rfam family. Based on those regions, validated by sequence and
structure homology, the idea is to evaluate the annotation of candidate *mature*
regions that are contained in this hairpin-loop and validate their annotation
with an additional layer, supported by the structural alignments of sequences
selected from other organisms.

To do that, please execute again the script::
    
    $./run_miRNAture.sh validate

which essentially have the same input parameters, except for the ``-stage validation`` flag
that was changed to tell ``miRNAture`` that the second stage have to be
activated.

In this step, each detected miRNA candidate were grouped by their Rfam miRNA family. 
Based on this reference, previously calculated data from the family is retrieved. This 
input data, required to perform the correction of the *mature* sequences using the
``MIRfix`` program, was inferred as a product of this study [#f1]_ and
comprises this set of files:
    
    * The set of Rfam hairpin sequences.
    * The mature sequences annotated for each Rfam hairpin sequence.
    * The genomes/contigs/sequences that contained the Rfam sequences.
    * A mapping file, which explicity declares the relation between hairpin and
      their mature sequences.

For more details refer to the ``MIRfix`` `repository <https://github.com/Bierinformatik/MIRfix>`_ .
Automatically, ``miRNAture`` structure all your data and generate the required
input files to perform the *mature* annotation.

.. rubric:: Footnotes

.. [#f1] From the *seed* sequences from ``Rfam`` v.12.2 and additionally the sequences from ``Rfam`` and ``miRBase`` that reported *mature* sequences.
